{"version":3,"sources":["components/Todo.js","components/TodoList.js","actions/index.js","containers/VisibleTodoList.js","containers/AddTodo.js","components/App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","onClick","completed","text","react_default","a","createElement","style","textDecoration","TodoList","todos","toggleTodo","map","todo","components_Todo","Object","assign","key","id","nextTodoId","VisibleTodoList","connect","state","dispatch","type","AddTodo","input","ref","node","value","App","className","containers_AddTodo","containers_VisibleTodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAoBeA,EAjBF,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,QAASC,EAAsBF,EAAtBE,UAAWC,EAAWH,EAAXG,KAClC,OACEC,EAAAC,EAAAC,cAAA,MACEL,QAASA,EACTM,MAAO,CAAEC,eAAgBN,EAAY,eAAiB,SAErDC,ICcQM,EAnBE,SAAAT,GAAA,IAAGU,EAAHV,EAAGU,MAAOC,EAAVX,EAAUW,WAAV,OACfP,EAAAC,EAAAC,cAAA,UACGI,EAAME,IAAI,SAAAC,GAAI,OACbT,EAAAC,EAAAC,cAACQ,EAADC,OAAAC,OAAA,CAAMC,IAAKJ,EAAKK,IAAQL,EAAxB,CAA8BZ,QAAS,kBAAMU,EAAWE,EAAKK,YCJ/DC,EAAa,ECkBFC,EALSC,YAZA,SAAAC,GACtB,MAAO,CAAEZ,MAAOY,EAAMZ,QAGG,SAAAa,GACzB,MAAO,CACLZ,WAAY,SAAAO,GACVK,EDCoB,SAAAL,GACxB,MAAO,CACLM,KAbuB,cAcvBN,MCJWP,CAAWO,OAKFG,CAGtBZ,GCfEgB,EAAU,SAAAzB,GAAkB,IAC1B0B,EADWH,EAAevB,EAAfuB,SAGf,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEqB,IAAK,SAAAC,GACHF,EAAQE,KAGZxB,EAAAC,EAAAC,cAAA,UACEL,QAAS,WFXM,IAAAE,EEYboB,GFZapB,EEYIuB,EAAMG,MFXxB,CACLL,KANoB,WAOpBN,GAAIC,IACJhB,UESMuB,EAAMG,MAAQ,KAHlB,cAcSJ,EAFfA,EAAUJ,cAAUI,GCbLK,EATH,WACV,OACE1B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACb3B,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1770ed76.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Todo = ({ onClick, completed, text }) => {\n  return (\n    <li\n      onClick={onClick}\n      style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n    >\n      {text}\n    </li>\n  );\n};\n\n// propで受け取ったデータを表示\nTodo.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n};\n\nexport default Todo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Todo from \"./Todo\"; // Todo引き継ぎ\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul>\n    {todos.map(todo => (\n      <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n\nlet nextTodoId = 0; // todoカウント変数\nexport const addTodo = text => {\n  return {\n    type: ADD_TODO,\n    id: nextTodoId++, // idを入れただカウント増やす\n    text //text: textを省略\n  };\n};\n\nexport const toggleTodo = id => {\n  return {\n    type: TOGGLE_TODO,\n    id\n    //id: id\n  };\n};\n","import { connect } from \"react-redux\";\nimport TodoList from \"../components/TodoList\";\nimport { toggleTodo } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return { todos: state.todos };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleTodo: id => {\n      dispatch(toggleTodo(id));\n    }\n  };\n};\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);\n\nexport default VisibleTodoList;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../actions\";\n\nlet AddTodo = ({ dispatch }) => {\n  let input;\n\n  return (\n    <div>\n      <input\n        ref={node => {\n          input = node;\n        }}\n      />\n      <button\n        onClick={() => {\n          dispatch(addTodo(input.value));\n          input.value = \"\";\n        }}\n      >\n        Add Todo\n      </button>\n    </div>\n  );\n};\n\nAddTodo = connect()(AddTodo);\n\nexport default AddTodo;\n","import React from \"react\";\nimport VisibleTodoList from \"../containers/VisibleTodoList\";\nimport AddTodo from \"../containers/AddTodo\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AddTodo />\n      <VisibleTodoList />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}